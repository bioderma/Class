package dajin;

public class GawibawiboV2 {
	MemberDTO member;
	
	
	
	private void start() {
		// 이 메서드가 호출되면 play()가 호출되어 게임이 시작됨.
		play();
	}
	
	private void play() {
		// 여기서 사용자의 이메일을 입력받는 객체를 생성하고, 입력받는 메서드도 호출.
		member = new MemberDTO();
		
		
		
	}

	public static void main(String[] args) {
		new GawibawiboV2().start();
		
		
		
		/*
		 *  작성된 가위 바위 보 게임을 아래와 같은 설계로 재구현할 것.
		 *  
		 *  1. 게임 시작은 여기서 함.
		 *  2. 게임 시작 시 GawibawiboV2 클래스의 start() 메서드를 호출.
		 *  3. 각 클래스를 아래처럼 정의함.
		 *  3-1. GawibawiboV2 클래스는 paly() 에서 객체를 만들어 호출되어야 함.
		 *  3-2. play()는 사용자 ID를 입력 받아서 필드로 저장해야 함.
		 *  3-3. 필요에 따라서 사용자의 ID가 뭔지를 리턴 받을 수 있는 getter()를 구현할 것.
		 *  3-4. 이 클래스 <-- 여기까지가 클래스 1 
		 *  3-5. 클래스 2 --> 내부에는 사용자 이름을 입력 받고 난 후 실제 게임을 진행 하는 클래스의 객체를 생성.
		 *  	 이 때 객체 생성 후 특정 메서드를 호출하지 않아도 내부적으로 호출하여 사용자에게 게임 하겠는지 ask.
		 *  	 사용자가 싫다고 하기 전까지 게임은 계속 되어야 함.
		 *  	 사용자가 첫 게임을 실행 후 메뉴에는 아래처럼 나와야 함.
		 *  	 1. 뉴게임 2. 전적보기 3. 게임종료.
		 *  	 1을 누르면 게임은 계속되어짐. 
		 *  	 2를 누르면 전적보기가 출력되어야 함. <-- 이 내용을 출력하는 클래스3을 정의,
		 *  	 이 객체를 이용, 전적을 보여줄 것. (메서드와 생성자 등을 필요에 따라 적절히 연동할 것)
		 *  	 전적을 보여주고 나면 게임은 자동으로 끝남.
		 *  	 3을 누르면 게임은 자동 종료됨.
		 *  
		 *   이처럼 정의하려면 최소 4개의 클래스가 정의되어야 함.
		 *   어떤 클래스는 객체 초기화가 필요할 수 있으며, 메서드에서는 파라미터가 전달되어야 할 수 있으며,
		 *   어떤 메서드는 리턴해야 함.
		 */
	}
}
